module TrainData where

import Data.Bifunctor (Bifunctor (bimap))
import Data.Char (intToDigit)
import Math (Matrix, oneHotDecode, oneHotEncode)

-- Each input is a binary sequence (max length 8) ending in a (same-length) sequence of no-op values
-- Each output is the input sequence preceded by a (same-length) seqence of no-op values
trainData :: [(Matrix, Matrix)]
trainData =
  map
    ( \input ->
        let noOp = 2
            width = 3
            padding = replicate (length input) noOp
            oneHotInput = map (oneHotEncode width) (input ++ padding)
            oneHotOutput = map (oneHotEncode width) (padding ++ input)
         in (oneHotInput, oneHotOutput)
    )
    [ [1, 1, 0, 1, 1, 0, 0, 1],
      [1, 0, 1, 0, 1, 1, 1],
      [1, 0, 0, 0, 1, 1, 1, 0],
      [1, 1, 1, 0, 1, 0],
      [1],
      [1, 0, 1, 1, 1, 1, 0],
      [1, 0, 1, 1, 1, 0, 0, 0],
      [1, 0, 0, 0, 0, 1, 0],
      [1, 0, 0, 0, 0, 0, 1, 0],
      [1, 0, 0],
      [1, 0, 1, 0, 1, 1, 0],
      [1, 1, 1, 1, 0, 0, 0],
      [1, 0, 0, 0, 0, 1, 1, 1],
      [1, 1, 1, 1, 0, 1],
      [1, 0, 1, 1, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 0, 0, 0, 1, 1, 0],
      [1, 1, 0, 1, 0, 0, 0, 0],
      [1, 1, 0, 1, 0, 0, 1, 0],
      [1, 0, 0, 1, 0, 1, 1, 1],
      [1, 0, 1, 0, 1, 1],
      [1, 0, 0, 0, 0, 1, 1],
      [1, 0, 1, 0, 1, 1, 0],
      [1, 0, 0, 1, 0, 1, 1],
      [1, 1, 0, 0, 0],
      [1, 1, 0, 1, 0, 1, 0, 1],
      [1, 1, 1, 1, 1, 1],
      [1, 0, 1, 0, 0, 1, 1, 1],
      [1, 1, 0, 0, 1, 1, 0, 0],
      [1, 1, 0, 1, 1, 0],
      [1, 1, 0, 0, 0, 1, 0, 1],
      [1, 0, 0, 0, 1, 1, 0, 0],
      [1, 1, 0, 1, 0, 0, 1, 1],
      [1, 0, 1, 1, 0, 1],
      [1, 1, 1, 1, 0, 1, 1, 0],
      [1, 1, 0, 1, 1, 0, 0, 0],
      [1, 1, 1, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 0, 0],
      [1, 1, 0, 1, 1, 0, 0, 1],
      [1, 1, 1, 1, 1, 0, 1, 1],
      [1, 1, 1, 1, 0, 1, 1],
      [1, 1, 0, 1, 0, 1, 1, 0],
      [1, 0, 0, 1, 0, 0, 0, 1],
      [1, 0, 1, 1, 1, 0, 1],
      [1, 0, 0, 1, 0, 1, 0, 1],
      [1, 1, 0, 0, 1, 1, 1, 0],
      [1, 1, 1, 0, 0, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 0, 1, 1, 0, 0, 0, 1],
      [1, 0, 1, 1, 1, 1, 0, 1],
      [1, 0, 0],
      [1, 0, 1, 0, 0, 1],
      [1, 0, 1, 0, 0, 0, 0, 1],
      [1, 1, 1, 1, 1, 1, 1, 1],
      [1, 1, 0, 1, 1, 0, 1, 0],
      [1, 1, 0, 1, 1, 1, 0, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1, 1, 1, 1],
      [1, 1, 1, 0, 1, 0, 1],
      [1, 1, 1],
      [1, 0, 1, 0, 0, 0, 0, 0],
      [1, 0, 0, 1, 1, 1, 1, 0],
      [1, 0, 0, 0, 1, 0, 1, 1],
      [1, 0, 0, 0, 1, 0, 0, 1],
      [1, 1, 0, 1, 0, 1, 0, 0],
      [1, 1, 0, 1, 1, 0, 1, 1],
      [1, 1, 1, 1],
      [1, 1, 1, 0, 1, 0, 0, 0],
      [1, 1, 0, 1, 1, 1],
      [1, 0, 0, 0, 0, 1, 1, 1],
      [1, 0, 0, 1, 1, 0, 1],
      [1, 0, 1, 1, 0, 0, 0, 0],
      [1, 1, 1, 1, 0, 1, 1, 1],
      [1, 0, 0, 0, 0, 0, 0, 1],
      [1, 1, 0, 1, 0, 0],
      [1, 0, 1, 0, 1, 1, 0],
      [1, 1, 0, 1, 1, 1, 1, 1],
      [1, 0, 1, 1, 1, 1, 0],
      [1, 0, 0, 0, 1, 0, 0, 1],
      [1, 0, 0, 0, 0, 0, 0],
      [1, 0, 1, 0, 0, 0, 1],
      [1, 0, 0, 1, 0, 1, 0, 0],
      [1, 1, 1, 0],
      [1, 1, 0, 1, 1, 1, 0, 1],
      [1, 0, 0, 0, 1, 1, 1],
      [1, 1, 0, 0, 1, 0, 0, 0],
      [1, 1, 1, 0, 0, 1, 1, 1],
      [1, 1, 1, 1, 0, 0, 1, 1],
      [1, 0, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 0],
      [1, 0, 0, 1, 1, 0, 1, 0],
      [1, 1, 1, 0, 1, 0, 0, 1],
      [1, 1, 0, 1, 1, 1, 1],
      [1, 0, 1, 1, 0, 0, 1],
      [1, 1, 0, 0, 1, 1, 1, 0],
      [1, 0, 1, 1, 1, 1, 0, 0],
      [1, 0, 1, 0],
      [1, 1, 1, 1, 0, 1, 0, 1],
      [1, 1, 1, 1, 1, 0, 1],
      [1, 0, 1, 0, 0, 0, 0],
      [1, 0, 1, 0, 1, 1, 1],
      [1, 0, 1, 1, 1, 1, 0, 0],
      [1, 0, 1, 1, 0, 0, 1, 1],
      [1, 1, 1, 1, 0, 1, 0, 1],
      [1, 1, 0, 1, 1, 0],
      [1, 0, 1],
      [1, 1, 0, 1, 0, 1, 0],
      [1, 0, 0, 0, 0, 1, 1, 1],
      [1, 1, 0, 1, 0, 0, 1, 1],
      [1, 0, 1, 1, 1, 0, 0, 1],
      [1, 0, 0, 0, 1, 1, 0, 1],
      [1, 0, 1, 1, 1, 0, 0],
      [1, 0, 0, 0, 1, 1],
      [1, 1, 1, 0, 1, 1, 0, 0],
      [1, 0, 0, 1, 0, 0, 0, 0],
      [1, 0, 1, 0, 0, 0, 0, 0],
      [1, 0, 0, 0, 1, 0, 1, 0],
      [1, 0, 1, 0, 1, 0, 0, 0],
      [1, 0, 0, 1, 1, 0],
      [1, 1, 0, 1, 1],
      [1, 1, 1, 0, 0, 1, 1],
      [1, 1, 1, 1, 0, 1, 1, 0],
      [1, 1, 1, 0, 1, 0, 0, 0],
      [1, 1, 0, 1, 0, 0, 1],
      [1, 0, 0, 0, 1, 0, 0, 1],
      [1, 0, 0, 1, 0, 0, 0, 0],
      [1, 0, 1, 0, 0, 0, 1, 1],
      [1, 0, 1, 1, 1, 1, -1]
    ]

trainExample2String :: (Matrix, Matrix) -> (String, String)
trainExample2String example =
  let f = map (intToDigit . oneHotDecode)
   in bimap f f example
